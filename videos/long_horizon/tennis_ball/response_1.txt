Task: PutTennisBallInCabinet
Task Description: "put the tennis ball in the cabinet"

Decomposition: 

Task 1: OpenLeftDoorCabinet
Task Description: "open the left door of the cabinet"
```
def compute_reward(self):
    # reward function
    door_handle_pose = self.env.get_pose_by_link_name("cabinet", "link_1")
    gripper_pose = self.env.get_robot_gripper_pose()
    distance_gripper_to_handle = torch.norm(door_handle_pose - gripper_pose, dim=-1)

    door_state = self.env.get_state_by_joint_name("cabinet", "joint_1")

    cost = distance_gripper_to_handle - door_state
    reward = - cost

    # success condition
    target_door_state = self.env.get_limits_by_joint_name("cabinet", "joint_1")["upper"]
    success = torch.abs(door_state - target_door_state) < 0.1

    return reward, success
```

Task 2: PickUpTennisBall
Task Description: "pick up the tennis ball"
```
def compute_reward(self):
    # reward function
    tennis_ball_pose = self.env.get_pose_by_link_name("tennis_ball", "base")
    gripper_pose = self.env.get_robot_gripper_pose()
    distance_gripper_to_tennis_ball = torch.norm(door_handle_pose - door_handle_pose, dim=-1)

    cost = distance_gripper_to_tennis_ball
    reward = - cost

    # success condition
    success = distance_gripper_to_tennis_ball < 0.1

    return reward, success
```

Task 3: PlaceTennisBallInCabinet
Task Description: "place the tennis ball in the cabinet"
```
def compute_reward(self):
    # reward function
    tennis_ball_pose = self.env.get_pose_by_link_name("tennis_ball", "base")
    goal_pose = self.env.get_goal_pose()

    distance_tennis_ball_to_goal = torch.norm(goal_pose - tennis_ball_pose, dim=-1)

    cost = distance_tennis_ball_to_goal
    reward = - cost

    # success condition
    success = distance_tennis_ball_to_goal < 0.1

    return reward, success
```